// A test program in Cone that does nothing interesting

mut glowy = 34u32

fn cone() u32:
    imm x = if true {5f} else {7d}
    imm mum = 'a: loop:
        if glowy:     break 'a 4
        if glowy > 0: break 5
    mut unsy = 23u
    unsy = unsy++

macro one[p]:
  p

fn max[T](x T, y T) T:
  if x > y {x} else {y}

// Define a custom type that supports an array-like API
struct List:
  mut arr [4] i32

  fn `[]`(index usize) i32
  {
    arr[index]
  }

  fn `&[]`(self &mut) &mut []i32 {
    &mut arr
  }

fn listops() {
  mut list = List[arr: [1, 5, 2, 8]]
  // imm r = &mut list[3]
  //imm q = *r
}

fn matching(x i32) i32 {
  mut result = Ok[i32, i32][5]
  mut some = if x==0 {Some[5]} else {Null[i32][]}
  mut n = one[if x==0 {5} else {6}]
  imm r = max(2, 6)
  imm r3 = max[f32](3.6, 6.2)
  match x {
    ==1: {imm r = 8; n = 4}
    else {
      n = 7
    }
  }
  n	
}

